/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package wifipasswords;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.JOptionPane;

/**
 *
 * @author dionysis
 */
public class QrScanner extends javax.swing.JDialog implements Runnable,ThreadFactory {
    private WebcamPanel panel =null;
    private Webcam webcam=null;
    private static MyJFrame myFrame;
    private static final long serialVersionUID =6441489157408381878L;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    private WifiProfile profile;
    private boolean stop;
    /**
     * Creates new form QrScanner
     */
    public QrScanner(java.awt.Frame parent, boolean modal,MyJFrame myFrame) {
        super(parent, modal);
        this.myFrame=myFrame;
        this.setResizable(false);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.stop=false;
        initComponents();
        initWebcam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Σαρωτής QR Code");
        setBackground(new java.awt.Color(113, 143, 164));

        jPanel1.setBackground(getBackground());
        jPanel1.setMaximumSize(new java.awt.Dimension(397, 419));
        jPanel1.setMinimumSize(new java.awt.Dimension(397, 419));

        jPanel2.setVisible(false);
        jPanel2.setBackground(new java.awt.Color(113, 143, 164));

        jLabel1.setBackground(new java.awt.Color(175, 217, 245));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton1.setText("Σύνδεση");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 74, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(0, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(113, 143, 164));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        

        try {
            // Set the SSID and password
            String ssid = profile.getName();
            String password = profile.getPassword();

            // Create the XML content
            String xmlContent = "<?xml version=\"1.0\"?><WLANProfile xmlns=\"http://www.microsoft.com/networking/WLAN/profile/v1\"><name>"
                + ssid + "</name><SSIDConfig><SSID><name>" + ssid + "</name></SSID></SSIDConfig><connectionType>ESS</connectionType>"
                + "<connectionMode>auto</connectionMode><MSM><security><authEncryption><authentication>WPA2PSK</authentication>"
                + "<encryption>AES</encryption><useOneX>false</useOneX></authEncryption><sharedKey><keyType>passPhrase</keyType>"
                + "<protected>false</protected><keyMaterial>" + password + "</keyMaterial></sharedKey></security></MSM>"
                + "<MacRandomization xmlns=\"http://www.microsoft.com/networking/WLAN/profile/v3\"><enableRandomization>false</enableRandomization>"
                + "</MacRandomization></WLANProfile>";

            // Create the temporary XML file
            String xmlFilePath = System.getProperty("java.io.tmpdir") + ssid + "-wireless-profile-generated.xml";
            Files.write(Paths.get(xmlFilePath), xmlContent.getBytes());

            // Execute the commands
            ProcessBuilder processBuilder = new ProcessBuilder("cmd.exe", "/c", "netsh wlan add profile filename=\"" + xmlFilePath + "\"");
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();
            process.waitFor();

            processBuilder = new ProcessBuilder("cmd.exe", "/c", "netsh wlan connect name=\"" + ssid + "\"");
            processBuilder.redirectErrorStream(true);
            process = processBuilder.start();

            // Capture the output of the command
            StringBuilder output = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    output.append(line).append(System.lineSeparator());
                }
            }

            process.waitFor();

            // Check if the connection was successful
            boolean isConnected = output.toString().contains("Connection request was completed successfully");

            // Delete the temporary XML file
            Files.deleteIfExists(Paths.get(xmlFilePath));

            if (isConnected) {
                JOptionPane.showMessageDialog(myFrame, "Σύνδεθήκατε στο Wi-Fi", "Επιτυχής Σύνδεση", JOptionPane.INFORMATION_MESSAGE);
                clearOnExit();
                System.out.println("Wi-Fi connection successful.");
                myFrame.getConnectedProfile();
            } else {
                JOptionPane.showMessageDialog(myFrame, "Αποτυχία Σύνδεσης στο Wi-Fi", "Αποτυχία Σύνδεσης", JOptionPane.ERROR_MESSAGE);
                clearOnExit();
            }
        } catch (IOException | InterruptedException e) {
            JOptionPane.showMessageDialog(myFrame, "Αποτυχία Σύνδεσης στο Wi-Fi", "Αποτυχία Σύνδεσης", JOptionPane.ERROR_MESSAGE);
            stop = true;
            clearOnExit();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables


    private void initWebcam(){
        webcam = Webcam.getDefault(); // Get the default webcam
        Dimension[] resolutions = webcam.getViewSizes(); // Get the available resolutions

        // Choose the highest resolution
        Dimension largestResolution = resolutions[resolutions.length - 1];

        webcam.setViewSize(largestResolution);
        
//        Dimension size = WebcamResolution.VGA.getSize();
//        webcam = Webcam.getWebcams().get(0);
//        webcam.setViewSize(size);
        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(largestResolution);
        panel.setFPSDisplayed(true);
        
        jPanel3.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 380, 280));
        
        executor.execute(this);
    }
    @Override
    public void run() {
        do{
            if(stop){
                break;
            }
            try{
                Thread.sleep(100);
            }
            catch(Exception e){
                e.printStackTrace();
            }
            Result result =null;
            BufferedImage image=null;
            if(webcam.isOpen()){
                if((image=webcam.getImage())==null){
                    continue;
                }
            }
            if(image!=null){
            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
            
            try{
                result = new MultiFormatReader().decode(bitmap);
            }
            catch(Exception e){
                
            }
            if(result!=null){
                jPanel2.setVisible(true);
                int startIndexSSID = result.getText().indexOf("S:") + 2; // Add 2 to skip "S:"
                int endIndexSSID = result.getText().indexOf(";", startIndexSSID);
                int startIndexPASS = result.getText().indexOf("P:") + 2; // Add 2 to skip "P:"
                int endIndexPASS = result.getText().indexOf(";", startIndexPASS);
                profile = new WifiProfile(result.getText().substring(startIndexSSID, endIndexSSID),result.getText().substring(startIndexPASS, endIndexPASS));
                // Extract the SSID value from the string
                String ssid = result.getText().substring(startIndexSSID, endIndexSSID);
                jLabel1.setText(ssid);
            }}
        }while(!stop);
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r,"My Thread");
        t.setDaemon(true);
        return t;
    }
     public void clearOnExit(){
        stop=true;
        webcam.close();
        this.dispose();
   }
}
